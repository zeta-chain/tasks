/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockSystemContract,
  MockSystemContractInterface,
} from "../../../../contracts/shared/MockSystemContract.sol/MockSystemContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "wzeta_",
        type: "address",
      },
      {
        internalType: "address",
        name: "uniswapv2Factory_",
        type: "address",
      },
      {
        internalType: "address",
        name: "uniswapv2Router02_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerIsNotFungibleModule",
    type: "error",
  },
  {
    inputs: [],
    name: "CantBeIdenticalAddresses",
    type: "error",
  },
  {
    inputs: [],
    name: "CantBeZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTarget",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "SetGasCoin",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "SetGasPrice",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "SetGasZetaPool",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "SetWZeta",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "SystemContractDeployed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "gasCoinZRC20ByChainId",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "gasPriceByChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "gasZetaPoolByChainId",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "address",
        name: "zrc20",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "onCrossChainCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "zrc20",
        type: "address",
      },
    ],
    name: "setGasCoinZRC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "setGasPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "setWZETAContractAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "uniswapv2FactoryAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "uniswapv2PairFor",
    outputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "uniswapv2Router02Address",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wZetaContractAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b506040516200112938038062001129833981810160405281019062000037919062000132565b82600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250507f80699e81136d69cb8367ad52a994e25c722a86da654b561d0c14b61a777e7ac560405160405180910390a1505050620001e1565b6000815190506200012c81620001c7565b92915050565b6000806000606084860312156200014e576200014d620001c2565b5b60006200015e868287016200011b565b935050602062000171868287016200011b565b925050604062000184868287016200011b565b9150509250925092565b60006200019b82620001a2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b620001d2816200018e565b8114620001de57600080fd5b50565b60805160601c60a05160601c610f1c6200020d600039600061044f015260006105ee0152610f1c6000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806397770dff1161007157806397770dff14610166578063a7cb050714610182578063c63585cc1461019e578063d7fd7afb146101ce578063d936a012146101fe578063ee2815ba1461021c576100a9565b80630be15547146100ae578063513a9c05146100de578063569541b91461010e578063762aa5ca1461012c578063842da36d14610148575b600080fd5b6100c860048036038101906100c391906108fd565b610238565b6040516100d59190610c18565b60405180910390f35b6100f860048036038101906100f391906108fd565b61026b565b6040516101059190610c18565b60405180910390f35b61011661029e565b6040516101239190610c18565b60405180910390f35b6101466004803603810190610141919061096a565b6102c4565b005b61015061044d565b60405161015d9190610c18565b60405180910390f35b610180600480360381019061017b9190610850565b610471565b005b61019c60048036038101906101979190610a04565b61050e565b005b6101b860048036038101906101b3919061087d565b610562565b6040516101c59190610c18565b60405180910390f35b6101e860048036038101906101e391906108fd565b6105d4565b6040516101f59190610cb1565b60405180910390f35b6102066105ec565b6040516102139190610c18565b60405180910390f35b6102366004803603810190610231919061092a565b610610565b005b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060405180606001604052806040518060200160405280600081525081526020013373ffffffffffffffffffffffffffffffffffffffff16815260200188815250905060008573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88876040518363ffffffff1660e01b8152600401610345929190610c33565b602060405180830381600087803b15801561035f57600080fd5b505af1158015610373573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039791906108d0565b9050806103d0576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff1663de43156e83888888886040518663ffffffff1660e01b8152600401610411959493929190610c5c565b600060405180830381600087803b15801561042b57600080fd5b505af115801561043f573d6000803e3d6000fd5b505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fdba79d534382d1a8ae108e4c8ecb27c6ae42ab8b91d44eedf88bd329f3868d5e600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516105039190610c18565b60405180910390a150565b80600080848152602001908152602001600020819055507f49f492222906ac486c3c1401fa545626df1f0c0e5a77a05597ea2ed66af9850d8282604051610556929190610cf5565b60405180910390a15050565b6000806000610571858561069f565b91509150858282604051602001610589929190610baa565b604051602081830303815290604052805190602001206040516020016105b0929190610bd6565b6040516020818303038152906040528051906020012060001c925050509392505050565b60006020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b806001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd1b36d30f6248e97c473b4d1348ca164a4ef6759022f54a58ec200326c39c45d8282604051610693929190610ccc565b60405180910390a15050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610708576040517fcb1e7cfe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610610742578284610745565b83835b8092508193505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107b4576040517f78b507da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9250929050565b6000813590506107ca81610ea1565b92915050565b6000815190506107df81610eb8565b92915050565b60008083601f8401126107fb576107fa610e1d565b5b8235905067ffffffffffffffff81111561081857610817610e18565b5b60208301915083600182028301111561083457610833610e22565b5b9250929050565b60008135905061084a81610ecf565b92915050565b60006020828403121561086657610865610e2c565b5b6000610874848285016107bb565b91505092915050565b60008060006060848603121561089657610895610e2c565b5b60006108a4868287016107bb565b93505060206108b5868287016107bb565b92505060406108c6868287016107bb565b9150509250925092565b6000602082840312156108e6576108e5610e2c565b5b60006108f4848285016107d0565b91505092915050565b60006020828403121561091357610912610e2c565b5b60006109218482850161083b565b91505092915050565b6000806040838503121561094157610940610e2c565b5b600061094f8582860161083b565b9250506020610960858286016107bb565b9150509250929050565b60008060008060008060a0878903121561098757610986610e2c565b5b600061099589828a0161083b565b96505060206109a689828a016107bb565b95505060406109b789828a016107bb565b94505060606109c889828a0161083b565b935050608087013567ffffffffffffffff8111156109e9576109e8610e27565b5b6109f589828a016107e5565b92509250509295509295509295565b60008060408385031215610a1b57610a1a610e2c565b5b6000610a298582860161083b565b9250506020610a3a8582860161083b565b9150509250929050565b610a4d81610d56565b82525050565b610a5c81610d56565b82525050565b610a73610a6e82610d56565b610dea565b82525050565b610a8a610a8582610d74565b610dfc565b82525050565b6000610a9c8385610d3a565b9350610aa9838584610da8565b610ab283610e31565b840190509392505050565b6000610ac882610d1e565b610ad28185610d29565b9350610ae2818560208601610db7565b610aeb81610e31565b840191505092915050565b6000610b03602083610d4b565b9150610b0e82610e4f565b602082019050919050565b6000610b26600183610d4b565b9150610b3182610e78565b600182019050919050565b60006060830160008301518482036000860152610b598282610abd565b9150506020830151610b6e6020860182610a44565b506040830151610b816040860182610b8c565b508091505092915050565b610b9581610d9e565b82525050565b610ba481610d9e565b82525050565b6000610bb68285610a62565b601482019150610bc68284610a62565b6014820191508190509392505050565b6000610be182610b19565b9150610bed8285610a62565b601482019150610bfd8284610a79565b602082019150610c0c82610af6565b91508190509392505050565b6000602082019050610c2d6000830184610a53565b92915050565b6000604082019050610c486000830185610a53565b610c556020830184610b9b565b9392505050565b60006080820190508181036000830152610c768188610b3c565b9050610c856020830187610a53565b610c926040830186610b9b565b8181036060830152610ca5818486610a90565b90509695505050505050565b6000602082019050610cc66000830184610b9b565b92915050565b6000604082019050610ce16000830185610b9b565b610cee6020830184610a53565b9392505050565b6000604082019050610d0a6000830185610b9b565b610d176020830184610b9b565b9392505050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000610d6182610d7e565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610dd5578082015181840152602081019050610dba565b83811115610de4576000848401525b50505050565b6000610df582610e06565b9050919050565b6000819050919050565b6000610e1182610e42565b9050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f600082015250565b7fff00000000000000000000000000000000000000000000000000000000000000600082015250565b610eaa81610d56565b8114610eb557600080fd5b50565b610ec181610d68565b8114610ecc57600080fd5b50565b610ed881610d9e565b8114610ee357600080fd5b5056fea26469706673582212208c0285c7248c37a4aa2355b804c80fe630aedf4e56e84b7eb90480945ce2769c64736f6c63430008070033";

type MockSystemContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockSystemContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockSystemContract__factory extends ContractFactory {
  constructor(...args: MockSystemContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    wzeta_: PromiseOrValue<string>,
    uniswapv2Factory_: PromiseOrValue<string>,
    uniswapv2Router02_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockSystemContract> {
    return super.deploy(
      wzeta_,
      uniswapv2Factory_,
      uniswapv2Router02_,
      overrides || {}
    ) as Promise<MockSystemContract>;
  }
  override getDeployTransaction(
    wzeta_: PromiseOrValue<string>,
    uniswapv2Factory_: PromiseOrValue<string>,
    uniswapv2Router02_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      wzeta_,
      uniswapv2Factory_,
      uniswapv2Router02_,
      overrides || {}
    );
  }
  override attach(address: string): MockSystemContract {
    return super.attach(address) as MockSystemContract;
  }
  override connect(signer: Signer): MockSystemContract__factory {
    return super.connect(signer) as MockSystemContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSystemContractInterface {
    return new utils.Interface(_abi) as MockSystemContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockSystemContract {
    return new Contract(address, _abi, signerOrProvider) as MockSystemContract;
  }
}
