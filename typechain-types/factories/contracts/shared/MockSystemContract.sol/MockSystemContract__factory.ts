/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockSystemContract,
  MockSystemContractInterface,
} from "../../../../contracts/shared/MockSystemContract.sol/MockSystemContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "wzeta_",
        type: "address",
      },
      {
        internalType: "address",
        name: "uniswapv2Factory_",
        type: "address",
      },
      {
        internalType: "address",
        name: "uniswapv2Router02_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerIsNotFungibleModule",
    type: "error",
  },
  {
    inputs: [],
    name: "CantBeIdenticalAddresses",
    type: "error",
  },
  {
    inputs: [],
    name: "CantBeZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTarget",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "SetGasCoin",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "SetGasPrice",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "SetGasZetaPool",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "SetWZeta",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "SystemContractDeployed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "gasCoinZRC20ByChainId",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "gasPriceByChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "gasZetaPoolByChainId",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "address",
        name: "zrc20",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "onCrossChainCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainID",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "zrc20",
        type: "address",
      },
    ],
    name: "setGasCoinZRC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "setGasPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "setWZETAContractAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "uniswapv2FactoryAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "uniswapv2PairFor",
    outputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "uniswapv2Router02Address",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wZetaContractAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b506040516200113f3803806200113f833981810160405281019062000037919062000132565b82600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250507f80699e81136d69cb8367ad52a994e25c722a86da654b561d0c14b61a777e7ac560405160405180910390a1505050620001e1565b6000815190506200012c81620001c7565b92915050565b6000806000606084860312156200014e576200014d620001c2565b5b60006200015e868287016200011b565b935050602062000171868287016200011b565b925050604062000184868287016200011b565b9150509250925092565b60006200019b82620001a2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b620001d2816200018e565b8114620001de57600080fd5b50565b60805160601c60a05160601c610f326200020d6000396000610465015260006106040152610f326000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806397770dff1161007157806397770dff14610166578063a7cb050714610182578063c63585cc1461019e578063d7fd7afb146101ce578063d936a012146101fe578063ee2815ba1461021c576100a9565b80630be15547146100ae578063513a9c05146100de578063569541b91461010e578063762aa5ca1461012c578063842da36d14610148575b600080fd5b6100c860048036038101906100c39190610913565b610238565b6040516100d59190610c2e565b60405180910390f35b6100f860048036038101906100f39190610913565b61026b565b6040516101059190610c2e565b60405180910390f35b61011661029e565b6040516101239190610c2e565b60405180910390f35b61014660048036038101906101419190610980565b6102c4565b005b610150610463565b60405161015d9190610c2e565b60405180910390f35b610180600480360381019061017b9190610866565b610487565b005b61019c60048036038101906101979190610a1a565b610524565b005b6101b860048036038101906101b39190610893565b610578565b6040516101c59190610c2e565b60405180910390f35b6101e860048036038101906101e39190610913565b6105ea565b6040516101f59190610cc7565b60405180910390f35b610206610602565b6040516102139190610c2e565b60405180910390f35b61023660048036038101906102319190610940565b610626565b005b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000336040516020016102d79190610c2e565b6040516020818303038152906040529050600060405180606001604052808381526020013373ffffffffffffffffffffffffffffffffffffffff16815260200189815250905060008673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89886040518363ffffffff1660e01b815260040161035a929190610c49565b602060405180830381600087803b15801561037457600080fd5b505af1158015610388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ac91906108e6565b9050806103e5576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8773ffffffffffffffffffffffffffffffffffffffff1663de43156e83898989896040518663ffffffff1660e01b8152600401610426959493929190610c72565b600060405180830381600087803b15801561044057600080fd5b505af1158015610454573d6000803e3d6000fd5b50505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fdba79d534382d1a8ae108e4c8ecb27c6ae42ab8b91d44eedf88bd329f3868d5e600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516105199190610c2e565b60405180910390a150565b80600080848152602001908152602001600020819055507f49f492222906ac486c3c1401fa545626df1f0c0e5a77a05597ea2ed66af9850d828260405161056c929190610d0b565b60405180910390a15050565b600080600061058785856106b5565b9150915085828260405160200161059f929190610bc0565b604051602081830303815290604052805190602001206040516020016105c6929190610bec565b6040516020818303038152906040528051906020012060001c925050509392505050565b60006020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b806001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd1b36d30f6248e97c473b4d1348ca164a4ef6759022f54a58ec200326c39c45d82826040516106a9929190610ce2565b60405180910390a15050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561071e576040517fcb1e7cfe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161061075857828461075b565b83835b8092508193505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107ca576040517f78b507da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9250929050565b6000813590506107e081610eb7565b92915050565b6000815190506107f581610ece565b92915050565b60008083601f84011261081157610810610e33565b5b8235905067ffffffffffffffff81111561082e5761082d610e2e565b5b60208301915083600182028301111561084a57610849610e38565b5b9250929050565b60008135905061086081610ee5565b92915050565b60006020828403121561087c5761087b610e42565b5b600061088a848285016107d1565b91505092915050565b6000806000606084860312156108ac576108ab610e42565b5b60006108ba868287016107d1565b93505060206108cb868287016107d1565b92505060406108dc868287016107d1565b9150509250925092565b6000602082840312156108fc576108fb610e42565b5b600061090a848285016107e6565b91505092915050565b60006020828403121561092957610928610e42565b5b600061093784828501610851565b91505092915050565b6000806040838503121561095757610956610e42565b5b600061096585828601610851565b9250506020610976858286016107d1565b9150509250929050565b60008060008060008060a0878903121561099d5761099c610e42565b5b60006109ab89828a01610851565b96505060206109bc89828a016107d1565b95505060406109cd89828a016107d1565b94505060606109de89828a01610851565b935050608087013567ffffffffffffffff8111156109ff576109fe610e3d565b5b610a0b89828a016107fb565b92509250509295509295509295565b60008060408385031215610a3157610a30610e42565b5b6000610a3f85828601610851565b9250506020610a5085828601610851565b9150509250929050565b610a6381610d6c565b82525050565b610a7281610d6c565b82525050565b610a89610a8482610d6c565b610e00565b82525050565b610aa0610a9b82610d8a565b610e12565b82525050565b6000610ab28385610d50565b9350610abf838584610dbe565b610ac883610e47565b840190509392505050565b6000610ade82610d34565b610ae88185610d3f565b9350610af8818560208601610dcd565b610b0181610e47565b840191505092915050565b6000610b19602083610d61565b9150610b2482610e65565b602082019050919050565b6000610b3c600183610d61565b9150610b4782610e8e565b600182019050919050565b60006060830160008301518482036000860152610b6f8282610ad3565b9150506020830151610b846020860182610a5a565b506040830151610b976040860182610ba2565b508091505092915050565b610bab81610db4565b82525050565b610bba81610db4565b82525050565b6000610bcc8285610a78565b601482019150610bdc8284610a78565b6014820191508190509392505050565b6000610bf782610b2f565b9150610c038285610a78565b601482019150610c138284610a8f565b602082019150610c2282610b0c565b91508190509392505050565b6000602082019050610c436000830184610a69565b92915050565b6000604082019050610c5e6000830185610a69565b610c6b6020830184610bb1565b9392505050565b60006080820190508181036000830152610c8c8188610b52565b9050610c9b6020830187610a69565b610ca86040830186610bb1565b8181036060830152610cbb818486610aa6565b90509695505050505050565b6000602082019050610cdc6000830184610bb1565b92915050565b6000604082019050610cf76000830185610bb1565b610d046020830184610a69565b9392505050565b6000604082019050610d206000830185610bb1565b610d2d6020830184610bb1565b9392505050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000610d7782610d94565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610deb578082015181840152602081019050610dd0565b83811115610dfa576000848401525b50505050565b6000610e0b82610e1c565b9050919050565b6000819050919050565b6000610e2782610e58565b9050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f600082015250565b7fff00000000000000000000000000000000000000000000000000000000000000600082015250565b610ec081610d6c565b8114610ecb57600080fd5b50565b610ed781610d7e565b8114610ee257600080fd5b50565b610eee81610db4565b8114610ef957600080fd5b5056fea2646970667358221220ba1a521952cb95876734a993329f855a42f4f47a0c5a23d603f1d961d4dcbe4c64736f6c63430008070033";

type MockSystemContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockSystemContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockSystemContract__factory extends ContractFactory {
  constructor(...args: MockSystemContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    wzeta_: PromiseOrValue<string>,
    uniswapv2Factory_: PromiseOrValue<string>,
    uniswapv2Router02_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockSystemContract> {
    return super.deploy(
      wzeta_,
      uniswapv2Factory_,
      uniswapv2Router02_,
      overrides || {}
    ) as Promise<MockSystemContract>;
  }
  override getDeployTransaction(
    wzeta_: PromiseOrValue<string>,
    uniswapv2Factory_: PromiseOrValue<string>,
    uniswapv2Router02_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      wzeta_,
      uniswapv2Factory_,
      uniswapv2Router02_,
      overrides || {}
    );
  }
  override attach(address: string): MockSystemContract {
    return super.attach(address) as MockSystemContract;
  }
  override connect(signer: Signer): MockSystemContract__factory {
    return super.connect(signer) as MockSystemContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSystemContractInterface {
    return new utils.Interface(_abi) as MockSystemContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockSystemContract {
    return new Contract(address, _abi, signerOrProvider) as MockSystemContract;
  }
}
