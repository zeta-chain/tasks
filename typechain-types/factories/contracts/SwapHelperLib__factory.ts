/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  SwapHelperLib,
  SwapHelperLibInterface,
} from "../../contracts/SwapHelperLib";

const _abi = [
  {
    inputs: [],
    name: "AdditionsOverflow",
    type: "error",
  },
  {
    inputs: [],
    name: "CantBeIdenticalAddresses",
    type: "error",
  },
  {
    inputs: [],
    name: "CantBeZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "IdenticalAddresses",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientInputAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientLiquidity",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPath",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPathLength",
    type: "error",
  },
  {
    inputs: [],
    name: "MultiplicationsOverflow",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughToPayGasFee",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongGasContract",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract SystemContract",
        name: "systemContract",
        type: "SystemContract",
      },
      {
        internalType: "address",
        name: "zrc20",
        type: "address",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "getMinOutAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "minOutAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "uniswapv2PairFor",
    outputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x611276610052600b82828239805160001a6073146045577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c8063b864987914610045578063c63585cc14610075575b600080fd5b61005f600480360381019061005a9190610d0a565b6100a5565b60405161006c9190610d80565b60405180910390f35b61008f600480360381019061008a9190610d9b565b6104ec565b60405161009c9190610dfd565b60405180910390f35b60006060600267ffffffffffffffff8111156100c4576100c3610e18565b5b6040519080825280602002602001820160405280156100f25781602001602082028036833780820191505090505b509050848160008151811061010a57610109610e47565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050838160018151811061015957610158610e47565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600061020e8773ffffffffffffffffffffffffffffffffffffffff1663d936a0126040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102079190610e8b565b858461055e565b9050600367ffffffffffffffff81111561022b5761022a610e18565b5b6040519080825280602002602001820160405280156102595781602001602082028036833780820191505090505b509150858260008151811061027157610270610e47565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508673ffffffffffffffffffffffffffffffffffffffff1663569541b96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031a9190610e8b565b8260018151811061032e5761032d610e47565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050848260028151811061037d5761037c610e47565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060006104328873ffffffffffffffffffffffffffffffffffffffff1663d936a0126040518163ffffffff1660e01b8152600401602060405180830381865afa158015610407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042b9190610e8b565b868561055e565b905080600182516104439190610ee7565b8151811061045457610453610e47565b5b6020026020010151826001845161046b9190610ee7565b8151811061047c5761047b610e47565b5b6020026020010151116104b65780600182516104989190610ee7565b815181106104a9576104a8610e47565b5b60200260200101516104df565b81600183516104c59190610ee7565b815181106104d6576104d5610e47565b5b60200260200101515b9350505050949350505050565b60008060006104fb85856106da565b91509150858282604051602001610513929190610f63565b6040516020818303038152906040528051906020012060405160200161053a92919061105d565b6040516020818303038152906040528051906020012060001c925050509392505050565b606060028251101561059c576040517f20db826700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b815167ffffffffffffffff8111156105b7576105b6610e18565b5b6040519080825280602002602001820160405280156105e55781602001602082028036833780820191505090505b50905082816000815181106105fd576105fc610e47565b5b60200260200101818152505060005b6001835161061a9190610ee7565b8110156106d25760008061066f8786858151811061063b5761063a610e47565b5b602002602001015187600187610651919061109f565b8151811061066257610661610e47565b5b60200260200101516107f4565b9150915061069884848151811061068957610688610e47565b5b602002602001015183836108f7565b846001856106a6919061109f565b815181106106b7576106b6610e47565b5b6020026020010181815250505050808060010191505061060c565b509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610742576040517fcb1e7cfe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161061077c57828461077f565b83835b8092508193505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107ed576040517f78b507da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9250929050565b600080600061080385856109eb565b509050600080610814888888610b05565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561085e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108829190611155565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16146108e15780826108e4565b81815b8095508196505050505050935093915050565b6000808403610932576040517f098fb56100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008314806109415750600082145b15610978576040517fbb55fd2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061098f6103e586610b8c90919063ffffffff16565b905060006109a68483610b8c90919063ffffffff16565b905060006109d1836109c36103e889610b8c90919063ffffffff16565b610bec90919063ffffffff16565b905080826109df91906111d7565b93505050509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610a53576040517fbd969eb000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610610a8d578284610a90565b83835b8092508193505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610afe576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9250929050565b60008373ffffffffffffffffffffffffffffffffffffffff1663e6a4390584846040518363ffffffff1660e01b8152600401610b42929190611217565b602060405180830381865afa158015610b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b839190610e8b565b90509392505050565b600080831480610bb05750818383850292508281610bad57610bac6111a8565b5b04145b610be6576040517f5797276a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b6000818301905082811015610c2d576040517fa259879500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c6382610c38565b9050919050565b6000610c7582610c58565b9050919050565b610c8581610c6a565b8114610c9057600080fd5b50565b600081359050610ca281610c7c565b92915050565b610cb181610c58565b8114610cbc57600080fd5b50565b600081359050610cce81610ca8565b92915050565b6000819050919050565b610ce781610cd4565b8114610cf257600080fd5b50565b600081359050610d0481610cde565b92915050565b60008060008060808587031215610d2457610d23610c33565b5b6000610d3287828801610c93565b9450506020610d4387828801610cbf565b9350506040610d5487828801610cbf565b9250506060610d6587828801610cf5565b91505092959194509250565b610d7a81610cd4565b82525050565b6000602082019050610d956000830184610d71565b92915050565b600080600060608486031215610db457610db3610c33565b5b6000610dc286828701610cbf565b9350506020610dd386828701610cbf565b9250506040610de486828701610cbf565b9150509250925092565b610df781610c58565b82525050565b6000602082019050610e126000830184610dee565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050610e8581610ca8565b92915050565b600060208284031215610ea157610ea0610c33565b5b6000610eaf84828501610e76565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ef282610cd4565b9150610efd83610cd4565b9250828203905081811115610f1557610f14610eb8565b5b92915050565b60008160601b9050919050565b6000610f3382610f1b565b9050919050565b6000610f4582610f28565b9050919050565b610f5d610f5882610c58565b610f3a565b82525050565b6000610f6f8285610f4c565b601482019150610f7f8284610f4c565b6014820191508190509392505050565b600081905092915050565b7fff00000000000000000000000000000000000000000000000000000000000000600082015250565b6000610fd0600183610f8f565b9150610fdb82610f9a565b600182019050919050565b6000819050919050565b6000819050919050565b61100b61100682610fe6565b610ff0565b82525050565b7f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f600082015250565b6000611047602083610f8f565b915061105282611011565b602082019050919050565b600061106882610fc3565b91506110748285610f4c565b6014820191506110848284610ffa565b6020820191506110938261103a565b91508190509392505050565b60006110aa82610cd4565b91506110b583610cd4565b92508282019050808211156110cd576110cc610eb8565b5b92915050565b60006dffffffffffffffffffffffffffff82169050919050565b6110f6816110d3565b811461110157600080fd5b50565b600081519050611113816110ed565b92915050565b600063ffffffff82169050919050565b61113281611119565b811461113d57600080fd5b50565b60008151905061114f81611129565b92915050565b60008060006060848603121561116e5761116d610c33565b5b600061117c86828701611104565b935050602061118d86828701611104565b925050604061119e86828701611140565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006111e282610cd4565b91506111ed83610cd4565b9250826111fd576111fc6111a8565b5b828204905092915050565b61121181610c58565b82525050565b600060408201905061122c6000830185611208565b6112396020830184611208565b939250505056fea2646970667358221220320ecc134e51eeaeb4e6096fb9a3b2070fc1fb1177daec547c4ccfed10a56a9364736f6c634300081a0033";

type SwapHelperLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapHelperLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapHelperLib__factory extends ContractFactory {
  constructor(...args: SwapHelperLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapHelperLib> {
    return super.deploy(overrides || {}) as Promise<SwapHelperLib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapHelperLib {
    return super.attach(address) as SwapHelperLib;
  }
  override connect(signer: Signer): SwapHelperLib__factory {
    return super.connect(signer) as SwapHelperLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapHelperLibInterface {
    return new utils.Interface(_abi) as SwapHelperLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapHelperLib {
    return new Contract(address, _abi, signerOrProvider) as SwapHelperLib;
  }
}
