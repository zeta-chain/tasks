/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  OnlySystem,
  OnlySystemInterface,
} from "../../contracts/OnlySystem";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "OnlySystemContract",
    type: "error",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50600061002161006960201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610174565b60007391d18e54daf4f677cb28167158d6dd21f6ab392160016000611b58815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073edf1c3275d13489acdc6cd6ed246e72458b8795b60016000611b59815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600046815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b603f806101826000396000f3fe6080604052600080fdfea26469706673582212204ad7f1317d2cf0fbb89ed1137a929a638fe6fcfe267f7c5e5f2abbe5fc5d447664736f6c63430008070033";

type OnlySystemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OnlySystemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OnlySystem__factory extends ContractFactory {
  constructor(...args: OnlySystemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OnlySystem> {
    return super.deploy(overrides || {}) as Promise<OnlySystem>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OnlySystem {
    return super.attach(address) as OnlySystem;
  }
  override connect(signer: Signer): OnlySystem__factory {
    return super.connect(signer) as OnlySystem__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OnlySystemInterface {
    return new utils.Interface(_abi) as OnlySystemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OnlySystem {
    return new Contract(address, _abi, signerOrProvider) as OnlySystem;
  }
}
