/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  OnlySystem,
  OnlySystemInterface,
} from "../../contracts/OnlySystem";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_systemContractAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "OnlySystemContract",
    type: "error",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516101553803806101558339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600081519050610087816100f1565b92915050565b6000602082840312156100a3576100a26100ec565b5b60006100b184828501610078565b91505092915050565b60006100c5826100cc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100fa816100ba565b811461010557600080fd5b50565b603f806101166000396000f3fe6080604052600080fdfea26469706673582212206a96c204136062952aef1b9d799057f079bab409bc73b1c69d5bd069adaddf2264736f6c63430008070033";

type OnlySystemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OnlySystemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OnlySystem__factory extends ContractFactory {
  constructor(...args: OnlySystemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _systemContractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OnlySystem> {
    return super.deploy(
      _systemContractAddress,
      overrides || {}
    ) as Promise<OnlySystem>;
  }
  override getDeployTransaction(
    _systemContractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_systemContractAddress, overrides || {});
  }
  override attach(address: string): OnlySystem {
    return super.attach(address) as OnlySystem;
  }
  override connect(signer: Signer): OnlySystem__factory {
    return super.connect(signer) as OnlySystem__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OnlySystemInterface {
    return new utils.Interface(_abi) as OnlySystemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OnlySystem {
    return new Contract(address, _abi, signerOrProvider) as OnlySystem;
  }
}
